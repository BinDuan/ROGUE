---
title: "R Notebook"
output: html_notebook
---
```{r}
library(SingleCellExperiment);library(tidyverse);library(reticulate);library(tidyverse)
library(ggplot2);library(scmap);library(fmsb);library(ggsci);library(scibet)
library(Seurat);library(M3Drop);library(ROCR);library(cluster);library(parallel);library(scran)
```
# process data -> data_frame
```{r}
pro_da <- function(.x){
  row_name <- rownames(.x)
  .x <- as.data.frame(.x)
  .x <- lapply(.x, as.numeric) %>% do.call("data.frame", .)
  rownames(.x) <- row_name
  return(.x)
}
cal_r <- function(.x){
  u <- mean(.x)
  v <- var(.x)
  p <- (v-u)/v
  r <- u^2/(v-u)
  c(u,v,r,p)
}
cal_ds <- function(ent, inter){+++++  
  tmp <- ent %>% 
    #dplyr::filter(mean.expr > 0) %>%
    dplyr::arrange(mean.expr) %>%
    dplyr::mutate(pro.expr = ceiling(mean.expr/inter))
  
  tmp %>%
    dplyr::mutate(
      cb = purrr::map2(
        .x = pro.expr,
        .y = entropy,
        .f = function(.x, .y){
          tp <- tmp %>% dplyr::filter(pro.expr == .x)
          if(nrow(tp)>9){
            tp %>%
              dplyr::pull(entropy) %>%
              median() -> ent
            
            pv <- pnorm(.y, mean = mean(tp$entropy), sd = sd(tp$entropy))
          }
          else{
            tp1 <- c()
            tmp %>% dplyr::filter(pro.expr < .x) -> tp1
            if(nrow(tp1) > 4){
              tp1 <- tp1 %>% dplyr::slice((nrow(.)-4):nrow(.))
            }
              
            tmp %>%
              dplyr::filter(pro.expr > .x) %>%
              dplyr::slice(1:5) -> tp2
            
            ctp <- rbind(tp1,tp2)
            ctp <- rbind(ctp,tp)
            ctp %>%
              dplyr::arrange(entropy) %>%
              dplyr::slice(-c(1:2)) %>%
              dplyr::slice(-c((nrow(.)-1):nrow(.))) -> ctp
            
            ent <- mean(ctp$entropy)
            
            pv <- pnorm(.y, mean = mean(ctp$entropy), sd = sd(ctp$entropy))
          }
          c(ent, pv)
        }
      )
    ) %>%
    dplyr::mutate(fit = purrr::map_dbl(cb,function(.x){.x[1]})) %>%
    dplyr::mutate(pv2 = purrr::map_dbl(cb,function(.x){.x[2]})) %>%
    dplyr::mutate(ds = fit - entropy) %>%
    dplyr::mutate(pv = 1-pnorm(.$ds, mean = mean(.$ds), sd = sd(.$ds)))
}
cal_rogue <- function(.x, cutoff = 0.05, k = 45, cf.ds = 0, features = NA){
  if(!is.na(features)){
    .x <- .x %>% dplyr::filter(Gene %in% features)
  }
  sig_value <- abs(.x$ds[.x$p.adj < cutoff & .x$p.value < cutoff & .x$ds > cf.ds])
  #a <- 
  sig_value <- sum(sig_value)
  1-sig_value/(sig_value+k)
  #a/(sum(abs(.x$ds))+5)
}
cal_des <- function(.x){ 
  .x <- .x + 1
  tibble(
    gene = colnames(.x),
    mean.expr = colMeans(.x)
  ) -> tmp
  
  .x <- log(.x)
  tmp %>%
    dplyr::mutate(E1 = colMeans(.x)) %>%
    dplyr::mutate(E2 = log(mean.expr)) %>%
    dplyr::mutate(ds = E2 - E1) -> tmp
  
  return(tmp)
}
Entropy <- function(expr, window=1, r = 0.01){ 
  n_threads <- getOption("scibet.n_threads")
  #expr <- as.data.frame(expr)

  ent_res <- tibble(
    gene = colnames(expr),
    mean.expr = log(colMeans(expr)+r)
  )

  expr <- expr[,ent_res$gene]
  out <- GenEntr(expr, window, n_threads)

  ent_res %>%
    dplyr::mutate(entropy = out) -> ent_res

  return(ent_res)
}
Entropy <- function(expr, r = 1){
  tmp <- log(expr+1)
  entropy <- colMeans(tmp)
  mean.expr <- log(colMeans(expr)+r)
  
  ent_res <- tibble(
    Gene = colnames(expr),
    mean.expr = mean.expr,
    entropy = entropy
  )
  
  return(ent_res)
}
```
#simulation
```{r}
simul_da <- function(gene_means, r = 2, n_gene = 10000, n_cell = 2000, ZINB = F){
  sda <- matrix(data=NA, nrow=n_cell, ncol=n_gene, byrow=FALSE, dimnames=NULL)
  gene_means <- gene_means[gene_means > 0]
  u <- median(gene_means)
  for (i in 1:n_gene) {
    p <- gene_means[i]/(gene_means[i]+r)
    tmp <- rnbinom(n=n_cell, prob = 1-p, size = r)
    if(isTRUE(ZINB)){
      x <- -(mean(tmp)/u - 1.5)
      p <- 1/(1+exp(-x))
      n <- ceiling(n_cell*p)
      tmp[sample(n_cell,n)] <- 0
    }
    sda[,i] <- tmp
  }
  
  colnames(sda) <- paste("Gene", 1:ncol(sda), sep = '')
  rownames(sda) <- paste("Cell", 1:nrow(sda), sep = '')
  sda <- as.data.frame(sda)
  sda <- lapply(sda, as.numeric) %>% do.call("data.frame", .)
  return(sda)
}
simul_diff <- function(r = 2, n_gene = 10000, n_cell = 2000, n_diff = 200, sub = 0.5, ZINB = F){   
  
  gene_means <- exp(rnorm(n_gene, 0, sd = 2))
  
  sda1 <- simul_da(gene_means = gene_means, r = r, n_gene = n_gene, n_cell = n_cell, ZINB = ZINB)
  diff1 <- gene_means[1:n_diff]
  fc <- exp(rnorm(n_diff, mean = 0,sd = 2))
  
  tmp <- tibble(
    mean.expr1 = diff1,
    mean.expr2 = diff1*fc,
    fc = fc,
    Gene = paste("Gene", 1:n_diff, sep = "")
  )
  
  u <- median(gene_means)
  
  simul_expr <- function(.x, .l){
    p <- .x/(.x+r)
    tmp <- rnbinom(.l, prob = 1-p, size = r)
    if(isTRUE(ZINB)){
      x <- -(mean(tmp)/u - 1.5)
      p <- 1/(1+exp(-x))
      n <- ceiling(.l*p)
      tmp[sample(.l, n)] <- 0
    }
    
    return(tmp)
  }
  for (i in 1:nrow(tmp)) {
    expr1 <- simul_expr(tmp[i,]$mean.expr1, .l = ceiling(n_cell*sub))
    expr2 <- simul_expr(tmp[i,]$mean.expr2, .l = n_cell - ceiling(n_cell*sub))
    sda1[,i] <- c(expr1, expr2)
  }
  sda1 <- as.data.frame(sda1)
  sda <- list(sda1, tmp)
  return(sda)
}
```
#entropy fit using loess
```{r}
entropy_fit <- function(.x, span = 0.1){
  .x <- .x %>% dplyr::filter(is.finite(mean.expr)) %>% dplyr::filter(entropy > 0)
  fit <- loess(entropy~mean.expr, data = .x, span=span)
  prd <- predict(fit, .x$mean.expr)
  .x %>%
    dplyr::mutate(fit = prd) %>%
    dplyr::mutate(ds = fit - entropy) %>%
    dplyr::mutate(pv = 1-pnorm(.$ds, mean = mean(.$ds), sd = sd(.$ds))) %>%
    dplyr::filter(pv > 0.1) -> tmp
  
  fit <- loess(entropy~mean.expr, data = tmp, span=span)
  prd <- predict(fit, .x$mean.expr)
  .x %>%
    dplyr::mutate(fit = prd) %>%
    dplyr::mutate(ds = fit - entropy) %>%
    dplyr::filter(is.finite(ds)) %>%
    dplyr::mutate(pv = 1-pnorm(.$ds, mean = mean(.$ds), sd = sd(.$ds))) %>%
    dplyr::filter(pv > 0.1) -> tmp
  
  fit <- loess(entropy~mean.expr, data = tmp, span=span)
  prd <- predict(fit, .x$mean.expr)
  
  .x %>%
    dplyr::mutate(fit = prd) %>%
    dplyr::mutate(ds = fit - entropy) %>%
    dplyr::filter(is.finite(ds)) -> .x
  
  .x <- .x %>% dplyr::mutate(p.value = 1-pnorm(.x$ds, mean = mean(.x$ds), sd = sd(.x$ds)))
  p.adj <- p.adjust(.x$p.value, method = "fdr")
  .x <- .x %>% dplyr::mutate(p.adj = p.adj) %>% dplyr::arrange(desc(ds))
}
```
#calculate r of NB
```{r}
get_rp <- function(matr){
  tibble(
    gene = colnames(matr),
    mean.expr = colMeans(matr)
  ) %>%
    dplyr::mutate(
      nb = purrr::map(
        .x = gene,
        .f = function(.x){
          expr <- matr[,.x]
          expr <- expr[expr > 0]
          cal_r(expr)
        }
      )
    ) -> tmp

  tmp %>%
    dplyr::mutate(sd = purrr::map_dbl(nb,function(.x){.x[2]})) %>%
    dplyr::mutate(r = purrr::map_dbl(nb,function(.x){.x[3]})) %>%
    dplyr::mutate(p = purrr::map_dbl(nb,function(.x){.x[4]})) -> tmp
  
  tmp %>%
    dplyr::filter(p > -0.1) %>%
    dplyr::filter(r < 500 & r > -400) %>%
    ggplot(aes(mean.expr, r)) +
    geom_point() +
    theme_bw() +
    theme(
      legend.position = 'none',
      axis.title = element_text(size = 15,color="black"),
      axis.text = element_text(size = 15,color="black"),
      legend.title = element_text(size = 0),
      legend.text = element_text(size = 0),
      axis.text.y = element_text(color="black"),
      axis.text.x = element_text(color="black")
    ) +
    labs(
      x = "mean expression",
      y = "r"
    )
}
```
#diff expression
```{r}
m3d_fun <- function(expr){ 
  expr <- as.matrix(expr)
  expr <- t(expr)
  norm <- M3DropConvertData(expr, is.counts=TRUE)
  DEgenes <- M3Drop::M3DropFeatureSelection(norm, suppress.plot = T, mt_threshold = 2)
  DEgenes <- DEgenes %>% 
    dplyr::arrange(p.value)
  return(DEgenes)
}
HVG_fun <- function(expr){  
  expr <- t(expr)
  colnames(expr) <- 1:ncol(expr)
  s_da <- CreateSeuratObject(counts = expr)
  s_da <- NormalizeData(object = s_da, verbose = FALSE)
  s_da <- FindVariableFeatures(object = s_da, 
                               selection.method = "vst", nfeatures = nrow(s_da), verbose = FALSE)
  tmp <- s_da@assays$RNA@meta.features %>% 
    tibble::rownames_to_column(var = 'Gene') %>%
    dplyr::arrange(desc(variance.standardized))
  
  tibble(
    Gene = tmp$Gene,
    p.value = 1-pnorm(tmp$variance.standardized, mean = mean(tmp$variance.standardized), sd = sd(tmp$variance.standardized))
  )
}
HVG_fun <- function(expr){  
  expr <- t(expr)
  hvg.res <- BrenneckeGetVariableGenes(expr, suppress.plot = T, fdr = 2)
  return(hvg.res)
}
Gini_fun <- function(expr){ 
  
  calcul.gini = function(x, unbiased = TRUE, na.rm = FALSE){
    if (!is.numeric(x)){
      warning("'x' is not numeric; returning NA")
      return(NA)
    }
    if (!na.rm && any(na.ind = is.na(x)))
      stop("'x' contain NAs")
    if (na.rm)
      x = x[!na.ind]
    n = length(x)
    mu = mean(x)
    N = if (unbiased) n * (n - 1) else n * n
    ox = x[order(x)]
    dsum = drop(crossprod(2 * 1:n - n - 1,  ox))
    dsum / (mu * N)
  }
  
  expr <- t(expr)
  ExprM.RawCounts <- expr
  
  
  minCellNum = 0
  minGeneNum = 0
  expressed_cutoff = 1
  gini.bi = 0
  log2.expr.cutoffl = 0
  log2.expr.cutoffh = 30
  Gini.pvalue_cutoff = 0.0001
  Norm.Gini.cutoff = 1
  span = 0.9
  outlier_remove = 0.75
  GeneList = 1
  Gamma = 0.9
  diff.cutoff = 1
  lr.p_value_cutoff = 1e-5
  CountsForNormalized = 100000
  
  ExpressedinCell_per_gene=apply(ExprM.RawCounts,1,function(x) length(x[x > expressed_cutoff ]))
  nonMir = grep("MIR|Mir", rownames(ExprM.RawCounts), invert = T)  # because Mir gene is usually not accurate 
  Genelist = intersect(rownames(ExprM.RawCounts)[nonMir],rownames(ExprM.RawCounts)[ExpressedinCell_per_gene >= minCellNum])
  ExpressedGene_per_cell=apply(ExprM.RawCounts[Genelist,],2,function(x) length(x[x>0]))
  ExprM.RawCounts.filter = ExprM.RawCounts[Genelist,ExpressedGene_per_cell >= 0]
  
  if(gini.bi==0){
    gini = apply(as.data.frame(ExprM.RawCounts.filter), 1, function(x){calcul.gini(as.numeric(x)) } )    #theoretically, gini have very low chance to have a 1 value
    GiniIndex = as.data.frame(cbind(1:dim(ExprM.RawCounts.filter)[1], gini))
  } else {
    GiniIndex1 <- as.data.frame(apply(ExprM.RawCounts.filter, 1, function(x){calcul.gini(as.numeric(x)) } ) )
    GiniIndex2 <- as.data.frame(apply(ExprM.RawCounts.filter+0.00001, 1, function(x){calcul.gini(as.numeric(1/x)) } ) ) #bi directional
    GiniIndex  <- cbind(GiniIndex1, GiniIndex2)
    colnames(GiniIndex)=c("gini1","gini2")
    GiniIndex$gini2_sign = 0 - GiniIndex$gini2;
    GiniIndex$gini = apply(GiniIndex, 1, max)
    GiniIndex <- na.omit(GiniIndex)
    GiniIndex$gini_sign = GiniIndex$gini
    for(genei in 1:dim(GiniIndex)[1])
    {
      GiniIndex[genei, 5] = ifelse(  GiniIndex[genei, 1] > GiniIndex[genei,2], "up-regulation", "down-regulation") 
    }
  }
  
  Maxs          = apply(ExprM.RawCounts.filter,1,max)
  Means         = apply(ExprM.RawCounts.filter,1,mean)
  log2.Maxs     = log2(Maxs+0.1)
  ExprM.Stat1   = as.data.frame(cbind(Maxs,GiniIndex$gini,log2.Maxs))
  colnames(ExprM.Stat1) = c("Maxs","Gini","log2.Maxs")
  ExprM.Stat1 = ExprM.Stat1[ExprM.Stat1$log2.Maxs>log2.expr.cutoffl & ExprM.Stat1$log2.Maxs<=log2.expr.cutoffh ,]  # is this necessary?
  log2.Maxs = ExprM.Stat1$log2.Maxs
  Gini      = ExprM.Stat1$Gini
  Maxs      = ExprM.Stat1$Maxs
  
  # .3 fitting in max-gini space 
  Gini.loess.fit        = loess(Gini~log2.Maxs, span=span, degree=1)
  Normlized.Gini.Score  = Gini.loess.fit$residuals   #residuals = Gini - Gini.fitted
  Gini.fitted           = Gini.loess.fit$fitted    
  ExprM.Stat1           = as.data.frame(cbind(ExprM.Stat1[,c("Maxs","Gini", "log2.Maxs")], Normlized.Gini.Score, Gini.fitted))
  colnames(ExprM.Stat1) = c("Maxs","Gini","log2.Maxs", "Norm.Gini", "Gini.fitted")
  
  
   ### remove 25% of first round outlier genes, do second round loess
  Gini.loess.fit.residual = residuals(Gini.loess.fit)                               
  thresh.outlier = quantile(Gini.loess.fit.residual[Gini.loess.fit.residual>0], outlier_remove) 
  id.genes.loess.fit = which(Gini.loess.fit.residual < thresh.outlier)               
  id.outliers.loess.fit = which(Gini.loess.fit.residual >= thresh.outlier)          
  log2.Maxs.genes = log2.Maxs[id.genes.loess.fit]                                   
  log2.Maxs.outliers = log2.Maxs[id.outliers.loess.fit]                            
  Gini.loess.fit.2 = loess(Gini[id.genes.loess.fit]~log2.Maxs[id.genes.loess.fit], span=span, degree = 1)
  Gini.loess.fit.2.predict = predict(Gini.loess.fit.2)  
  
  Gini.loess.fit.2.x.y = cbind(log2.Maxs.genes,Gini.loess.fit.2.predict)
  Gini.loess.fit.2.x.y.uniq = as.data.frame(unique(Gini.loess.fit.2.x.y))
  Gini.loess.fit.2.x.y.uniq = Gini.loess.fit.2.x.y.uniq[order(Gini.loess.fit.2.x.y.uniq[,1]),]
  log2.Maxs.genes.sorted = log2.Maxs.genes[order(log2.Maxs.genes)]                   
  Gini.loess.fit.2.predict.sorted = Gini.loess.fit.2.predict[order(log2.Maxs.genes)] 
  #using Gini.loess.fit.2 as model, predict gini value for those outlier which are not used for build model.
  #for each max in outliers set, find the id of max value which is most close in fitted data set
  loc.outliers = apply(matrix(log2.Maxs.outliers),1,function(x){
    if(x<max(log2.Maxs.genes.sorted)){
      return(which(log2.Maxs.genes.sorted>=x)[1])
    }else{
      return(which.max(log2.Maxs.genes.sorted))
    }})                
  #check the results
  outlier_max_in_fit <- cbind(log2.Maxs.outliers, loc.outliers, log2.Maxs.genes.sorted[loc.outliers])
  
  #based on Gini.loess.fit.2, predict outliers which was not used for fitting
  Gini.outliers.predict = apply(cbind(seq(length(log2.Maxs.outliers)),log2.Maxs.outliers),1,function(x){
    id = x[1]
    value = x[2]
    if(value == log2.Maxs.genes.sorted[loc.outliers[id]]){
      return(as.numeric(Gini.loess.fit.2.x.y.uniq[which(Gini.loess.fit.2.x.y.uniq$log2.Maxs.genes>=value)[1],2]))
    }else{
      if(loc.outliers[id]>1){
        return(Gini.loess.fit.2.predict.sorted[loc.outliers[id]-1]+(Gini.loess.fit.2.predict.sorted[loc.outliers[id]]-Gini.loess.fit.2.predict.sorted[loc.outliers[id]-1])*(value-log2.Maxs.genes.sorted[loc.outliers[id]-1])/(log2.Maxs.genes.sorted[loc.outliers[id]]-log2.Maxs.genes.sorted[loc.outliers[id]-1]))
      }else{
        return(Gini.loess.fit.2.predict.sorted[2]-(Gini.loess.fit.2.predict.sorted[2]-Gini.loess.fit.2.predict.sorted[1])*(log2.Maxs.genes.sorted[2]-value)/(log2.Maxs.genes.sorted[2]-log2.Maxs.genes.sorted[1]))
      }
    }
  })
  
  #plot outliers predict results
  outliers.precit.x.y.uniq = as.data.frame(unique(cbind(log2.Maxs.outliers, Gini.outliers.predict)))
  #plot(outliers.precit.x.y.uniq)
  #plot whole fit2 
  colnames(outliers.precit.x.y.uniq) = colnames(Gini.loess.fit.2.x.y.uniq)
  Gini.loess.fit.2.full.x.y.uniq = rbind(Gini.loess.fit.2.x.y.uniq, outliers.precit.x.y.uniq)
  #plot(Gini.loess.fit.2.full.x.y.uniq)
  
  #calcualte Normlized.Gini.Score2
  Normlized.Gini.Score2                        = rep(0,length(Gini.loess.fit.residual))               
  Normlized.Gini.Score2[id.genes.loess.fit]    = residuals(Gini.loess.fit.2)                         
  Normlized.Gini.Score2[id.outliers.loess.fit] = Gini[id.outliers.loess.fit] - Gini.outliers.predict 
  
  Gini.fitted2           = Gini - Normlized.Gini.Score2         
  ExprM.Stat1            = as.data.frame(cbind(ExprM.Stat1[,c("Maxs","Gini", "log2.Maxs", "Gini.fitted", "Norm.Gini" )], Gini.fitted2, Normlized.Gini.Score2))
  colnames(ExprM.Stat1)  = c("Maxs","Gini","log2.Maxs", "Gini.fitted","Norm.Gini",  "Gini.fitted2", "Norm.Gini2")
  Gini.pvalue            = pnorm(-abs(scale(ExprM.Stat1$Norm.Gini2, center=TRUE,scale=TRUE)))
  ExprM.Stat2            = cbind(ExprM.Stat1, Gini.pvalue)  #first time use ExprM.Stat2
  colnames(ExprM.Stat2)  = c("Maxs","Gini","log2.Maxs", "Gini.fitted","Norm.Gini",  "Gini.fitted2", "Norm.Gini2", "p.value")
  
  ExprM.Stat2 %>%
    tibble::rownames_to_column(var = 'Gene') %>%
    dplyr::arrange(p.value)
}
SE_fun <- function(expr, span = 0.1, r = 1){ 
  ent_res <- Entropy(expr, r = r)
  ent_res <- entropy_fit(ent_res, span = span) 
  return(ent_res)
}
```
#calculate auc
```{r}
cal_auc <- function(.x, gene){
  .x <- .x %>% dplyr::mutate(diff = ifelse(Gene %in% gene, 1, 0))
  pred <- prediction(.x$p.value, .x$diff)
  perf <- performance(pred,'auc')
  auc <- 1-perf@y.values[[1]]
  return(auc)
}
```
#radar plot
```{r}
coord_radar <- function (theta = "x", start = 0, direction = 1) {
  theta <- match.arg(theta, c("x", "y"))
  r <- if (theta == "x") "y" else "x"
  ggproto(NULL, CoordPolar, theta = theta, r = r, start = start, 
          direction = sign(direction),
          #expand = T,
          is_linear = function(coord) TRUE)
}
```
# get different sub_simulation data
```{r}
get_sim_res <- function(matr = matr, .x = 0, .y = 5, r = 2, r2 = 6){
  sda <- simul_diff(matr = matr, sub = .x, n_diff = 200, n_gene = 5000, c = .y, r = r, r2 = r2)
  res1 <- SE_fun(sda[[1]], span = 0.1)
  res2 <- m3d_fun(sda[[1]])
  res3 <- Gini_fun(sda[[1]])
  res4 <- HVG_fun(sda[[1]])

 tibble(res = list(res1,res2,res3,res4),
        method = c('SE','M3Drop','Gini','HVG')) %>%
   dplyr::mutate(
     auc = purrr::map_dbl(
     .x = res,
     .f = function(.x){
       cal_auc(.x, sda[[2]]$Gene)
          }
        )
      ) %>%
  dplyr::mutate(c = .y) %>%
  dplyr::mutate(sub = .x) %>% 
  dplyr::select(-res)
}
```
#read 10X data
```{r}
pro_10x <- function(.x){
  matr <- Read10X(.x)
  gene <- readr::read_rds("/home/pauling/projects/02_data/09_Gene/coding_gene.rds.gz")
  over_gene <- intersect(gene$gene_name, rownames(matr))
  matr <- matr[over_gene,]
  matr <- as.matrix(matr)
  matr <- t(matr)
  matr <- pro_da(matr)
  return(matr)
}
```
```{r}
silh_fun <- function(matr, label, nGenes = 1000, nPCs = 3){
  t_matr <- t(matr)
  HVG <- BrenneckeGetVariableGenes(t_matr, suppress.plot = T, fdr = 2)
  matr <- matr[,HVG$Gene[1:nGenes]]
  pca.data <- prcomp(matr, rank. = nPCs, center=TRUE)
  dd <- dist(pca.data$x[, seq_len(nPCs)])
  
  tibble(
    label = unique(label$label)
  ) %>%
    dplyr::mutate(num = 1:nrow(.)) -> tmp
  
  label <- label %>% dplyr::left_join(tmp, by = c("label"))
  
  summary(silhouette(label$num, dd))
}
```

```{r}
SEplot <- function(.x, point_size = 1, geom_line = T, p.adj = F, cutoff = 0.05){
  if(isFALSE(p.adj)){
    if(geom_line){
      .x %>%
        ggplot(aes(mean.expr, entropy)) +
        geom_point(colour = '#1E90FF', size = point_size) +
        geom_line(aes(mean.expr, fit), lwd = 0.7) +
        theme_bw() +
        theme(
            axis.title = element_text(size = 15,color="black"),
            axis.text = element_text(size = 15,color="black"),
            legend.title = element_text(size = 0),
            legend.text = element_text(size = 0),
            axis.text.y = element_text(color="black"),
            axis.text.x = element_text(color="black")
        ) +
        labs(
            x = "log(mean expression)",
            y = "expression entropy"
        ) -> p
    }
    else{
      .x %>%
        ggplot(aes(mean.expr, entropy)) +
        geom_point(colour = '#1E90FF', size = point_size) +
        #geom_line(aes(mean.expr, fit), lwd = 0.7) +
        theme_bw() +
        theme(
            axis.title = element_text(size = 15,color="black"),
            axis.text = element_text(size = 15,color="black"),
            legend.title = element_text(size = 0),
            legend.text = element_text(size = 0),
            axis.text.y = element_text(color="black"),
            axis.text.x = element_text(color="black")
        ) +
        labs(
            x = "log(mean expression)",
            y = "expression entropy"
        ) -> p
      }
    }
  if(isTRUE(p.adj)){
    .x <- .x %>% dplyr::mutate(sig = ifelse(p.adj <= cutoff, 1, 0))
    
    if(geom_line){
      .x %>%
        ggplot(aes(mean.expr, entropy)) +
        geom_point(aes(colour = factor(sig)), size = point_size) +
        geom_line(aes(mean.expr, fit), lwd = 0.7) +
        scale_color_manual(values = c("#1E90FF", "red")) +
        theme_bw() +
        theme(
            legend.position = "none",
            axis.title = element_text(size = 15,color="black"),
            axis.text = element_text(size = 15,color="black"),
            legend.title = element_text(size = 0),
            legend.text = element_text(size = 0),
            axis.text.y = element_text(color="black"),
            axis.text.x = element_text(color="black")
        ) +
        labs(
            x = "log(mean expression)",
            y = "expression entropy"
        ) -> p
      }
    
    else{
      .x %>%
        ggplot(aes(mean.expr, entropy)) +
        geom_point(aes(colour = factor(sig)), size = point_size) +
        #geom_line(aes(mean.expr, fit), lwd = 0.7) +
        scale_color_manual(values = c("#1E90FF", "red")) +
        theme_bw() +
        theme(
            legend.position = "none",
            axis.title = element_text(size = 15,color="black"),
            axis.text = element_text(size = 15,color="black"),
            legend.title = element_text(size = 0),
            legend.text = element_text(size = 0),
            axis.text.y = element_text(color="black"),
            axis.text.x = element_text(color="black")
        ) +
        labs(
            x = "log(mean expression)",
            y = "expression entropy"
        ) -> p
    }
  }
  return(p)
}
```
#rogue calculation for kmeans result
```{r}
kmeans_rouge <- function(matr, info){ 
  tibble(Cluster = unique(info$Cluster)) %>%
    dplyr::mutate(
      matr = purrr::map(
        .x = Cluster,
        .f = function(.x){
          info %>%
            dplyr::filter(Cluster == .x) %>%
            dplyr::pull(Barcode) -> barcode
          
          tmp_matr <- matr[barcode,]
          tmp_matr[is.na(tmp_matr)] <- 0
          return(tmp_matr)
        }
      )
    ) -> tmp_mda
  
  tmp_mda %>%
    dplyr::mutate(
      ent = purrr::map(
        .x = matr,
        .f = function(.x){
          tmp <- SE_fun(expr = .x, window = 1, span = 0.2)
          return(tmp)
      }
    )
  ) -> tmp_mda
  
  tmp_mda <- tmp_mda %>% 
    dplyr::mutate(rogue = 1-purrr::map_dbl(ent, cal_rogue)) %>%
    dplyr::select(-ent, -matr)
  
  return(tmp_mda)
}
```
```{r}
get_mean <- function(matr, info){
  info <- info %>% dplyr::mutate(ID = 1:nrow(.))
  n_row <- length(unique(info$Cluster))
  mean_expr <- matrix(data = NA, nrow = ncol(matr), ncol = n_row)
  n <- 0
  for (i in unique(info$Cluster)) {
    n <- n + 1
    ID <- info %>% dplyr::filter(Cluster == i) %>% dplyr::pull(ID)
    mean_expr[,n] <- colMeans(matr[ID,])
  }
  rownames(mean_expr) <- colnames(matr)
  colnames(mean_expr) <- paste("Cluster_",unique(info$Cluster), sep = "")
  
  row_sum <- as.numeric(rowMeans(mean_expr))
  row_sum <- log(row_sum+1)
  tmp_expr <- log(mean_expr+1)
  var1 <- rowMeans(tmp_expr)
  
  mean_expr <- as.data.frame(mean_expr) %>% dplyr::mutate(ds = row_sum-var1)
  rownames(mean_expr) <- colnames(matr)
  return(mean_expr)
}
```
#mix cell types
```{r}
rogue_of_mixtures <- function(matr, info, cell_typs, n = 2000, rep = 20){
  info1 <- info %>% dplyr::filter(label == cell_typs[1])
  info2 <- info %>% dplyr::filter(label == cell_typs[2])
  
  tibble(ratio = c(0,1/51,1/21,1/11,1/2)) %>%
    dplyr::mutate(
      rogue = purrr::map(
        .x = ratio,
        .f = function(.x){
          num1 = ceiling(n*.x)
          num2 = n-num1
          print(num1)
          tibble(Rep = 1:rep) %>%
            dplyr::mutate(
              rogue = purrr::map_dbl(
                .x = Rep,
                .f = function(.x){
                  index1 <- info1 %>% dplyr::sample_n(num1) %>% dplyr::pull(ID)
                  index2 <- info2 %>% dplyr::sample_n(num2) %>% dplyr::pull(ID)
                  index <- c(index1, index2)
                  expr <- matr[index,]
                  ent <- SE_fun(expr, span = 0.1)
                  rogue <- cal_rogue(ent)
                  return(rogue)
                }
              )
            ) -> rogue_rep
        }
      )
    ) -> tmp1
  
  tibble(ratio = c(0,1/51,1/21,1/11)) %>%
    dplyr::mutate(
      rogue = purrr::map(
        .x = ratio,
        .f = function(.x){
          num2 = ceiling(n*.x) #### cell number
          num1 = n-num2  ####
          print(num1)
          tibble(Rep = 1:rep) %>%
            dplyr::mutate(
              rogue = purrr::map_dbl(
                .x = Rep,
                .f = function(.x){
                  index1 <- info1 %>% dplyr::sample_n(num1) %>% dplyr::pull(ID)
                  index2 <- info2 %>% dplyr::sample_n(num2) %>% dplyr::pull(ID)
                  index <- c(index1, index2)
                  expr <- matr[index,]
                  ent <- SE_fun(expr, span = 0.1)
                  rogue <- cal_rogue(ent)
                  return(rogue)
                }
              )
            ) -> rogue_rep
        }
      )
    ) -> tmp2
  
  tmp2 <- tmp2[c(4:1),]
  tmp <- tmp1 %>% dplyr::bind_rows(tmp2)
  
  prop <- c("0:1","1:50","1:20","1:10","1:1","10:1","20:1","50:1","1:0")
  tmp <- tmp %>% dplyr::mutate(prop = prop)
  tmp <- tmp %>%
    dplyr::mutate(
      rogue = purrr::map2(
        .x = rogue,
        .y = prop,
        .f = function(.x, .y){
          .x %>% dplyr::mutate(prop = .y)
        }
      )
    )
  
  tmp <- tmp %>% dplyr::mutate(ID = 1:nrow(.))
  tmp <- tmp %>%
    dplyr::mutate(
      rogue = purrr::map2(
        .x = rogue,
        .y = ID,
        .f = function(.x, .y){
          .x %>% dplyr::mutate(ID = .y)
        }
      )
    )
  
  return(tmp)
}
si_of_mixtures <- function(pca_da, info, cell_typs, n = 2000, rep = 20){
  info1 <- info %>% dplyr::filter(label == cell_typs[1])
  info2 <- info %>% dplyr::filter(label == cell_typs[2])
  info_sub <- info %>% dplyr::filter(!(label %in% cell_typs))
  
  tibble(ratio = c(0,1/21,1/11,1/4,1/2)) %>%
    dplyr::mutate(
      si = purrr::map(
        .x = ratio,
        .f = function(.x){
          num1 = ceiling(n*.x)
          num2 = n-num1
          print(num1)
          tibble(Rep = 1:rep) %>%
            dplyr::mutate(
              rogue = purrr::map_dbl(
                .x = Rep,
                .f = function(.x){
                  index1 <- info1 %>% dplyr::sample_n(num1) %>% dplyr::pull(ID)
                  index2 <- info2 %>% dplyr::sample_n(num2) %>% dplyr::pull(ID)
                  index <- c(index1, index2)
                  pda <- pca_da[c(index, info_sub$ID),]
                  info_tmp <- info[c(index, info_sub$ID),]
                  rownames(pda) <- 1:nrow(pda)
                  
                  tibble(
                    label = unique(info_tmp$label)
                    ) %>%
                    dplyr::mutate(num = 1:nrow(.)) -> tmp
  
                  info_tmp <- info_tmp %>% dplyr::left_join(tmp, by = c("label"))
                  
                  dd <- dist(pda)
                  si <- summary(silhouette(info_tmp$num, dd))
                  return(as.numeric(si$clus.avg.widths[1]))
                }
              )
            )
        }
      )
    ) -> tmp1
  
  tibble(ratio = c(0,1/21,1/11,1/4)) %>%
    dplyr::mutate(
      si = purrr::map(
        .x = ratio,
        .f = function(.x){
          num2 = ceiling(n*.x)
          num1 = n-num2
          print(num1)
          tibble(Rep = 1:rep) %>%
            dplyr::mutate(
              rogue = purrr::map_dbl(
                .x = Rep,
                .f = function(.x){
                  index1 <- info1 %>% dplyr::sample_n(num1) %>% dplyr::pull(ID)
                  index2 <- info2 %>% dplyr::sample_n(num2) %>% dplyr::pull(ID)
                  index <- c(index1, index2)
                  pda <- pca_da[c(index, info_sub$ID),]
                  info_tmp <- info[c(index, info_sub$ID),]
                  rownames(pda) <- 1:nrow(pda)
                  
                  tibble(
                    label = unique(info_tmp$label)
                    ) %>%
                    dplyr::mutate(num = 1:nrow(.)) -> tmp
  
                  info_tmp <- info_tmp %>% dplyr::left_join(tmp, by = c("label"))
                  
                  dd <- dist(pda)
                  si <- summary(silhouette(info_tmp$num, dd))
                  return(as.numeric(si$clus.avg.widths[1]))
                }
              )
            )
        }
      )
    ) -> tmp2
  
  tmp2 <- tmp2[c(4:1),]
  tmp <- tmp1 %>% dplyr::bind_rows(tmp2)
  
  prop <- c("0:1","1:20","1:10","1:3","1:1","3:1","10:1","20:1","1:0")
  tmp <- tmp %>% dplyr::mutate(prop = prop)
  tmp <- tmp %>%
    dplyr::mutate(
      si = purrr::map2(
        .x = si,
        .y = prop,
        .f = function(.x, .y){
          .x %>% dplyr::mutate(prop = .y)
        }
      )
    )
  
  tmp <- tmp %>% dplyr::mutate(ID = 1:nrow(.))
  tmp <- tmp %>%
    dplyr::mutate(
      si = purrr::map2(
        .x = si,
        .y = ID,
        .f = function(.x, .y){
          .x %>% dplyr::mutate(ID = .y)
        }
      )
    )
  
  return(tmp)
}
```

```{r}
get_hd <- function(.x, .y, cell_type){
  colnames(.y) <- colnames(.x)
  
  .x <- .x %>%
    dplyr::mutate(
      mean.rogue = purrr::map_dbl(
        .x = rogue,
        .f = function(.x){
          mean(.x$rogue)
        }
      )
    )
  
  .y <- .y %>%
    dplyr::mutate(
      mean.rogue = purrr::map_dbl(
        .x = rogue,
        .f = function(.x){
          mean(.x$rogue)
        }
      )
    )
  
  .x <- .x %>%
    dplyr::mutate(hd1 = 100*(.x$mean.rogue[1]-mean.rogue)/.x$mean.rogue[1]) %>%
    dplyr::mutate(hd2 = 100*(.x$mean.rogue[9]-mean.rogue)/.x$mean.rogue[9]) %>%
    dplyr::mutate(method = "rogue")
  
  .y <- .y %>%
    dplyr::mutate(hd1 = 100*(.y$mean.rogue[1]-mean.rogue)/2) %>%
    dplyr::mutate(hd2 = 100*(.y$mean.rogue[9]-mean.rogue)/2) %>%
    dplyr::mutate(method = "Silhouette")
  
  .x$prop[6:9] <- .x$prop[4:1]
  .y$prop[6:9] <- .y$prop[4:1]
  
  tmp1 <- .x[2:5,] %>% 
    dplyr::bind_rows(.y[2:5,]) %>% 
    dplyr::mutate(label = paste(cell_type[1],"-",cell_type[2], sep = "")) %>% 
    dplyr::select(-hd2)
  
  tmp2 <- .x[5:8,] %>% 
    dplyr::bind_rows(.y[5:8,]) %>% 
    dplyr::mutate(label = paste(cell_type[2],"-",cell_type[1], sep = "")) %>%
    dplyr::rename(hd1 = hd2)
  
  tmp1 %>% dplyr::bind_rows(tmp2)
}
```

```{r}
matr_filter <- function(.x, min.cells = 10, min.genes = 0){
  cell_count <- colSums(.x > 0, na.rm = T)
  gene_count <- rowSums(.x > 0, na.rm = T)
  
  lq1 <- cell_count < min.cells
  lq2 <- gene_count < min.genes
  
  return(.x[!lq2, !lq1])
}
matr_toli <- function(ent, expr, n = 10, span = 0.1, r = 0.01){
  sig.gene <- ent %>% dplyr::filter(p.adj < 0.05) %>% dplyr::pull(Gene)
  ng <- length(sig.gene)
  expr <- expr[,sig.gene]
  
  mean.v <- c()
  entr.v <- c()
  for (i in 1:ng) {
    .x <- as.numeric(expr[,i])
    .x <- base::sort(.x, decreasing = T)
    .x <- .x[-c(1:n)]
    mean.v[i] <- log(mean(.x)+r)
    entr.v[i] <- mean(log(.x+1))
  }
  
  mean.cut <- min(ent$mean.expr)
  
  ent$mean.expr[1:ng] <- mean.v
  ent$entropy[1:ng] <- entr.v
  
  ent <- ent %>% dplyr::select(-p.adj) %>% dplyr::filter(mean.expr > mean.cut)
  ent <- entropy_fit(ent, span = span)
  return(ent)
}
```

```{r}
get_rogue_inc <- function(.x){
  n_row <- nrow(.x)
  .x$rogue[[1]] <- .x$rogue[[1]] %>% dplyr::mutate(anc = rogue)
  tt <- .x
  res1 <- .x$rogue[[1]]
  a <- .x$cells[[1]]
  for (i in 2:n_row) {
    
    res2 <- .x$rogue[[i]]
    
    
    b <- .x$cells[[i]]
    
    res1 %>%
      dplyr::mutate(
        anc = purrr::map_dbl(
        .x = cluster,
        .f = function(.x){
          tmp <- table(Var1 = b[a == .x]) %>% as.tibble()
          tmp$n <- tmp$n/sum(tmp$n)
          tmp %>%
            dplyr::left_join(res2[,c(1,3)], by = c("Var1" = "cluster")) %>%
            dplyr::mutate(rogue = n*rogue) %>%
            dplyr::pull(rogue) %>%
            sum()
          }
        )
      ) -> res1
    
    tt$rogue[[i]] <- res1
  }
  
  average.rogue_ <- c()
  
  for (i in 1:nrow(.x)) {
    average.rogue_[i] <- mean(tt$rogue[[i]]$anc)
  }
  
  .x <- .x %>% dplyr::mutate(average.rogue = average.rogue_)
  return(.x)
}
```

```{r}
bio.gene <- function(matr, batch, gene_num = 1500){
   comb.ent <- SE_fun(matr)
   comb.gene <- comb.ent$Gene[comb.ent$p.value < 0.01]
   uni.batch <- unique(batch)
   gene.list <- list()
   for (i in 1:length(uni.batch)) {
     tmp.expr <- matr[batch == uni.batch[i],]
     tmp.expr <- matr_filter(tmp.expr, min.cells = 10)
     tmp.ent <- SE_fun(tmp.expr)
     gene.list[[i]] <- tmp.ent$Gene[tmp.ent$p.value < 0.01]
   }
   
   bio.gene <- gene.list[[1]]
   for (i in 2:length(gene.list)) {
     bio.gene <- unique(c(bio.gene, gene.list[[i]]))
   }
   
   bio.gene <- intersect(comb.gene, bio.gene)
   return(bio.gene)
}
```

